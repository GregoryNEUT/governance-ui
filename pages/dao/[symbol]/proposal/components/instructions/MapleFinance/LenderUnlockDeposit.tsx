import React, { useContext, useEffect, useState } from 'react'
import * as yup from 'yup'
import { SyrupClient } from '@maplelabs/syrup-sdk'
import {
  Governance,
  GovernanceAccountType,
  ProgramAccount,
  serializeInstructionToBase64,
} from '@solana/spl-governance'
import useWalletStore from 'stores/useWalletStore'
import { validateInstruction } from '@utils/instructionTools'
import {
  MapleFinanceLenderUnlockDepositForm,
  UiInstruction,
} from '@utils/uiTypes/proposalCreationTypes'
import Select from '@components/inputs/Select'
import { pools } from '@utils/instructions/MapleFinance/poolList'
import useGovernanceAssets from '@hooks/useGovernanceAssets'
import useWallet from '@hooks/useWallet'
import { tryGetMint } from '@utils/tokens'
import GovernedAccountSelect from '../../GovernedAccountSelect'
import { NewProposalContext } from '../../../new'

const schema = yup.object().shape({
  governedAccount: yup.object().required('Governed token account is required'),
  poolName: yup.string().required('Pool Name is required'),
})

const LenderUnlockDepositForm = ({
  index,
  governance,
}: {
  index: number
  governance: ProgramAccount<Governance> | null
}) => {
  const wallet = useWalletStore((s) => s.current)
  const connection = useWalletStore((s) => s.connection.current)
  const { anchorProvider } = useWallet()
  const { governedTokenAccountsWithoutNfts } = useGovernanceAssets()
  const { handleSetInstructions } = useContext(NewProposalContext)
  const [form, setForm] = useState<MapleFinanceLenderUnlockDepositForm>({})
  const [formErrors, setFormErrors] = useState({})

  const handleSetForm = ({ propertyName, value }) => {
    setFormErrors({})
    setForm({ ...form, [propertyName]: value })
  }

  const shouldBeGoverned = !!(index !== 0 && governance)

  // Only allow treasury v2 accounts, because Maple require authority to pay fees when withdrawing
  // Which is not possible for other governance's types
  const governancesV2 = governedTokenAccountsWithoutNfts.filter(
    (governance) =>
      governance.governance.account.accountType ===
        GovernanceAccountType.GovernanceV2 && governance.isSol
  )

  const getInstruction = async (): Promise<UiInstruction> => {
    const isValid = await validateInstruction({ schema, form, setFormErrors })
    const { governedAccount, poolName } = form

    if (
      !isValid ||
      !governedAccount ||
      !governedAccount.governance?.account ||
      !poolName ||
      !wallet ||
      !wallet.publicKey
    ) {
      return {
        serializedInstruction: '',
        isValid: false,
        governance: governedAccount?.governance,
      }
    }

    const syrupClient = SyrupClient.load({
      // anchorProvider is enough match, that's why we force the compatibility with any
      provider: anchorProvider as any,
    })

    const pool = pools[poolName]

    const poolData = await syrupClient.program.account.pool.fetch(pool)

    const tokenMint = await tryGetMint(connection, poolData.baseMint)

    if (!tokenMint) {
      throw new Error(
        `Cannot load maple pool base mint for ${poolData.baseMint.toBase58()}`
      )
    }

    const lenderUser = governedAccount.pubkey

    const [lenderAddress] = await syrupClient.findProgramAddress([
      'lender',
      pool,
      lenderUser,
    ])

    const [lenderData, globalsData] = await Promise.all([
      syrupClient.program.account.lender.fetch(lenderAddress),
      syrupClient.program.account.globals.fetch(poolData.globals),
    ])

    const tx = await syrupClient.lenderActions().unlockShares({
      lender: {
        address: lenderAddress,
        data: lenderData,
      },
      lenderUser,
      globals: {
        address: poolData.globals,
        data: globalsData,
      },
    })

    if (!tx.instructions.length) {
      throw new Error(
        'Unexpected amount of instructions generated by unlockShares function (maple sdk)'
      )
    }

    const [instruction] = tx.instructions

    return {
      serializedInstruction: serializeInstructionToBase64(instruction),
      isValid: true,
      governance: governedAccount.governance,
      additionalSerializedInstructions: [],
    }
  }

  useEffect(() => {
    handleSetInstructions(
      {
        governedAccount: form.governedAccount?.governance,
        getInstruction,
      },
      index
    )
    // Only set instruction when form changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form])

  return (
    <>
      <GovernedAccountSelect
        label="Governed Account"
        governedAccounts={governancesV2}
        onChange={(value) => {
          handleSetForm({ value, propertyName: 'governedAccount' })
        }}
        value={form.governedAccount}
        error={formErrors['governedAccount']}
        shouldBeGoverned={shouldBeGoverned}
        governance={governance}
      />

      <Select
        label="Pool"
        value={form.poolName}
        placeholder="Please select..."
        onChange={(value) => {
          handleSetForm({
            value,
            propertyName: 'poolName',
          })
        }}
        error={formErrors['poolName']}
      >
        {Object.keys(pools).map((name) => (
          <Select.Option key={name} value={name}>
            {name}
          </Select.Option>
        ))}
      </Select>
    </>
  )
}

export default LenderUnlockDepositForm
